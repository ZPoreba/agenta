name: agenta-oss-gh

x-shared-environment: &shared-environment
    # External
    REGISTRY_REPO_NAME: ${REGISTRY_REPO_NAME:-agentaai}
    TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
    DOCKER_HUB_URL: ${DOCKER_HUB_URL:-https://hub.docker.com/v2/repositories}

    # Supertokens
    SUPERTOKENS_CONNECTION_URI: ${SUPERTOKENS_CONNECTION_URI:-http://host.docker.internal:3567}
    SUPERTOKENS_API_KEY: ${SUPERTOKENS_API_KEY:-}
    GOOGLE_OAUTH_CLIENT_ID: ${GOOGLE_OAUTH_CLIENT_ID:-}
    GOOGLE_OAUTH_CLIENT_SECRET: ${GOOGLE_OAUTH_CLIENT_SECRET:-}
    GITHUB_OAUTH_CLIENT_ID: ${GITHUB_OAUTH_CLIENT_ID:-}
    GITHUB_OAUTH_CLIENT_SECRET: ${GITHUB_OAUTH_CLIENT_SECRET:-}

    # LLM Provider Keys
    OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    MISTRAL_API_KEY: ${MISTRAL_API_KEY:-}
    COHERE_API_KEY: ${COHERE_API_KEY:-}
    ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
    ANYSCALE_API_KEY: ${ANYSCALE_API_KEY:-}
    PERPLEXITYAI_API_KEY: ${PERPLEXITYAI_API_KEY:-}
    DEEPINFRA_API_KEY: ${DEEPINFRA_API_KEY:-}
    TOGETHERAI_API_KEY: ${TOGETHERAI_API_KEY:-}
    ALEPHALPHA_API_KEY: ${ALEPHALPHA_API_KEY:-}
    OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
    GROQ_API_KEY: ${GROQ_API_KEY:-}
    GEMINI_API_KEY: ${GEMINI_API_KEY:-}

    # Mail Specific
    SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
    SEND_EMAIL_FROM_ADDRESS: ${SEND_EMAIL_FROM_ADDRESS:-}

    # Database & Message Queue
    POSTGRES_USER: ${POSTGRES_USER:-postgres}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    POSTGRES_DB: ${POSTGRES_DB:-agenta_oss}
    POSTGRES_URI: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/agenta_oss
    POSTGRESQL_CONNECTION_URI: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/supertokens_oss
    RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
    RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}@rabbitmq//
    REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/0}

    # Agenta Specific
    AGENTA_AUTH_KEY: ${AGENTA_AUTH_KEY:-}
    AGENTA_CRYPT_KEY: ${AGENTA_CRYPT_KEY:-}
    AGENTA_RUNTIME_PREFIX: ${AGENTA_RUNTIME_PREFIX:-}
    AGENTA_PORT: ${AGENTA_PORT:-81}
    FEATURE_FLAG: ${FEATURE_FLAG:-oss}
    ENVIRONMENT: ${ENVIRONMENT:-production}
    BARE_DOMAIN_NAME: ${BARE_DOMAIN_NAME:-localhost}
    DOMAIN_NAME: ${DOMAIN_NAME:-http://localhost}
    WEBSITE_DOMAIN_NAME: ${WEBSITE_DOMAIN_NAME:-http://localhost}
    AGENTA_HOST: ${AGENTA_HOST:-http://host.docker.internal:81}
    AGENTA_TEMPLATE_REPO: ${AGENTA_TEMPLATE_REPO:-agentaai/templates_v2}
    SERVICE_URL_TEMPLATE: ${SERVICE_URL_TEMPLATE:-http://localhost:81/services/{path}}
    ALEMBIC_CFG_PATH: ${ALEMBIC_CFG_PATH:-/app/oss/databases/postgres/migrations/alembic.oss.ini}
    POSTHOG_API_KEY: ${POSTHOG_API_KEY:-}

services:
    web:
        build:
            context: ../../../web
            dockerfile: oss/docker/Dockerfile.gh
            args:
                - NEXT_PUBLIC_AGENTA_API_URL=${DOMAIN_NAME:-http://localhost}:${AGENTA_PORT:-81}
                - NEXT_PUBLIC_FF="testing this value"
                - NEXT_PUBLIC_TELEMETRY_TRACKING_ENABLED=${TELEMETRY_ENABLED:-true}
                - NEXT_PUBLIC_POSTHOG_API_KEY=${POSTHOG_API_KEY}

        image: ghcr.io/agenta-ai/agenta-web

        ports:
            - "3000:3000"
        labels:
            - "traefik.http.routers.agenta-web.rule=PathPrefix(`/`)"
            - "traefik.http.routers.agenta-web.entrypoints=web"
            - "traefik.http.services.agenta-web.loadbalancer.server.port=3000"

        command: sh -c "node ./oss/server.js"
        restart: always

    api:
        build: 
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-api

        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.api.rule=PathPrefix(`/api/`)"
            - "traefik.http.routers.api.entrypoints=web"
            - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
            - "traefik.http.middlewares.api-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.api.middlewares=api-strip"
            - "traefik.http.services.api.loadbalancer.server.port=8000"
            - "traefik.http.routers.api.service=api"

        environment:
            << : *shared-environment

        command:
            [
                "uvicorn",
                "entrypoint:app",
                "--host",
                "0.0.0.0",
                "--port",
                "8000",
                "--reload",
                "--log-level",
                "info",
                "--root-path",
                "/api",
            ]

        depends_on:
            postgres:
                condition: service_healthy
            alembic:
                condition: service_healthy
        restart: always

    worker:
        build: 
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-api

        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

        extra_hosts:
            - "host.docker.internal:host-gateway"

        environment:
            << : *shared-environment

        command: >
            celery -A entrypoint.celery_app worker --concurrency=1 --loglevel=INFO

        depends_on:
            - postgres
            - rabbitmq
            - redis
        restart: always

    alembic:
        build: 
            context: ../../../api
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-api

        volumes:
            - /var/run/docker.sock:/var/run/docker.sock


        environment:
            << : *shared-environment

        command: sh -c "python -c 'from oss.databases.postgres.migrations.utils import run_alembic_migration; run_alembic_migration()' && touch /tmp/migrations_complete && tail -f /dev/null"
        
        depends_on:
            postgres:
                condition: service_healthy

        healthcheck:
            test: ["CMD-SHELL", "test -f /tmp/migrations_complete"]
            interval: 10s
            timeout: 5s
            retries: 5

    completion:
        build: 
            context: ../../../services/completion
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-completion

        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.completion.rule=PathPrefix(`/services/completion/`)"
            - "traefik.http.routers.completion.entrypoints=web"
            - "traefik.http.middlewares.completion-strip.stripprefix.prefixes=/services/completion"
            - "traefik.http.middlewares.completion-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.completion.middlewares=completion-strip"
            - "traefik.http.services.completion.loadbalancer.server.port=80"
            - "traefik.http.routers.completion.service=completion"
        
        environment:
            << : *shared-environment

        command: ["python", "oss/src/main.py"]

        restart: always
        
    chat:
        build: 
            context: ../../../services/chat
            dockerfile: oss/docker/Dockerfile.gh

        image: ghcr.io/agenta-ai/agenta-chat

        extra_hosts:
            - "host.docker.internal:host-gateway"
        labels:
            - "traefik.http.routers.chat.rule=PathPrefix(`/services/chat/`)"
            - "traefik.http.routers.chat.entrypoints=web"
            - "traefik.http.middlewares.chat-strip.stripprefix.prefixes=/services/chat"
            - "traefik.http.middlewares.chat-strip.stripprefix.forceslash=true"
            - "traefik.http.routers.chat.middlewares=chat-strip"
            - "traefik.http.services.chat.loadbalancer.server.port=80"
            - "traefik.http.routers.chat.service=chat"

        environment:
            << : *shared-environment

        command: ["python", "oss/src/main.py"]

        restart: always

    postgres:
        image: postgres:16.2

        volumes:
            - postgres-data:/var/lib/postgresql/data/
            - ../../../api/oss/databases/postgres/init-db-oss.sql:/docker-entrypoint-initdb.d/init-db.sql

        restart: always
        
        environment:
            << : *shared-environment

        ports:
            - "5432:5432"

        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d agenta_oss"]
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        image: rabbitmq:3-management

        volumes:
            - rabbitmq-data:/var/lib/rabbitmq


        environment:
            << : *shared-environment
        
        ports:
            - "5672:5672"
            - "15672:15672"
        restart: always

    redis:
        image: redis:latest
            
        volumes:
            - redis-data:/data


        restart: always

    traefik:
        image: traefik:v2.10

        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        
        command: --api.dashboard=true --api.insecure=true --providers.docker --entrypoints.web.address=:${AGENTA_PORT:-81}
        
        ports:
            - "${AGENTA_PORT:-81}:${AGENTA_PORT:-81}"
            - "8081:8080"
        
        restart: always

    supertokens:
        image: registry.supertokens.io/supertokens/supertokens-postgresql

        depends_on:
            postgres:
                condition: service_healthy
        ports:
            - 3567:3567
        environment:
            << : *shared-environment

        healthcheck:
            test: >
                bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
            interval: 10s
            timeout: 5s
            retries: 5
        restart: always
    
volumes:
    postgres-data:
    rabbitmq-data:
    redis-data: